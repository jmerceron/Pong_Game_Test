
// Pong_Game.cpp : This file contains the 'main' function. Program execution begins and ends there.
// Julien Merceron - 2023
// code generated by chatGPT
/*
ChatGPT Dec 15th 2022 Version
https://chat.openai.com/chat
*/
/*
SDL
https://github.com/libsdl-org/SDL/releases/tag/release-2.26.2
SDL2-devel-2.26.2-VC.zip
sdl/include
sdl/lib
wrt dlls, ...
... copy \SDL2\lib\x64\SDL2.dll to C:\Windows\System32
... and \SDL2\lib\x86\SDL2.dll to C:\Windows\SysWOW64. Voila
*/
/*
add include path to SDL in VC++ Directories
add lib path to SDL in VC++ Directories
add sdl2.lib in libs to link in Linker -> Input
change from console to windows in Linker -> System
*/

#include <iostream>
#include "sdl.h"
#include <windows.h>


// Screen dimensions
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;

// Screen dimensions (as percentages of the actual screen dimensions)
const int SCREEN_WIDTH_PERCENT = 80;
const int SCREEN_HEIGHT_PERCENT = 80;

// Paddle dimensions (as percentages of the screen width)
const int PADDLE_WIDTH_PERCENT = 2;
const int PADDLE_HEIGHT_PERCENT = 15;

// Ball dimensions (as percentages of the screen width)
const int BALL_WIDTH_PERCENT = 2;
const int BALL_HEIGHT_PERCENT = 2;

// Paddle and ball objects
SDL_Rect paddle1;
SDL_Rect paddle2;
SDL_Rect ball;


// Paddle and ball velocities
int paddle1_vel = 0;
int paddle2_vel = 0;
int ball_vel_x = 4;
int ball_vel_y = 4;




int APIENTRY WinMain(HINSTANCE hInst, HINSTANCE hInstPrev, PSTR cmdline, int cmdshow)
{

#if 0
    std::cout << "Hello World!\n";
    return 0;
#else
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0)
    {
        std::cout << "SDL could not initialize! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Get the actual screen dimensions
    int screen_width, screen_height;
    SDL_DisplayMode displayMode;
    // SDL_GetCurrentDisplayMode(0, &screen_width, &screen_height);
    if (SDL_GetCurrentDisplayMode(0, &displayMode) == 0)
    {
        // Success! The current display mode is stored in the "displayMode" variable
        screen_width = displayMode.w;
        screen_height = displayMode.h;
        std::cout << "Success! The current display mode is stored in the displayMode variable, and we have " << screen_width << ", " << screen_height << std::endl;
    }
    else
    {
        // An error occurred. You can use SDL_GetError() to get the error message.
        std::cout << "An error occurred. You can use SDL_GetError() to get the error message" << std::endl;
        return -1;
    }

    // Calculate the dimensions of the game screen (as pixels)
    int game_screen_width = screen_width * SCREEN_WIDTH_PERCENT / 100;
    int game_screen_height = screen_height * SCREEN_HEIGHT_PERCENT / 100;

    // Set the dimensions and positions of the paddles and ball
    paddle1.w = game_screen_width * PADDLE_WIDTH_PERCENT / 100;
    paddle1.h = game_screen_height * PADDLE_HEIGHT_PERCENT / 100;
    paddle1.x = 0;
    paddle1.y = game_screen_height / 2 - paddle1.h / 2;

    paddle2.w = game_screen_width * PADDLE_WIDTH_PERCENT / 100;
    paddle2.h = game_screen_height * PADDLE_HEIGHT_PERCENT / 100;
    paddle2.x = game_screen_width - paddle2.w;
    paddle2.y = game_screen_height / 2 - paddle2.h / 2;

    ball.w = game_screen_width * BALL_WIDTH_PERCENT / 100;
    ball.h = game_screen_height * BALL_HEIGHT_PERCENT / 100;
    ball.x = game_screen_width / 2 - ball.w / 2;
    ball.y = game_screen_height / 2 - ball.h / 2;

    // Create the window
    SDL_Window* window = SDL_CreateWindow("Pong", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, game_screen_width, game_screen_height, SDL_WINDOW_SHOWN);
    if (window == NULL)
    {
        std::cout << "Window could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Create the renderer
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL)
    {
        std::cout << "Renderer could not be created! SDL_Error: " << SDL_GetError() << std::endl;
        return -1;
    }

    // Main game loop
    // Run the game loop
    bool running = true;
    while (running)
    {
        // Handle events
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            if (event.type == SDL_QUIT)
            {
                running = false;
            }
            else if (event.type == SDL_KEYDOWN)
            {
                // Handle keyboard input
                if (event.key.keysym.sym == SDLK_UP)
                {
                    // Move the paddle up
                    paddle1.y -= 5; // Move the paddle up by 5 pixels
                }
                else if (event.key.keysym.sym == SDLK_DOWN)
                {
                    // Move the paddle down
                    paddle1.y += 5; // Move the paddle up by 5 pixels
                }
            }
            else if (event.type == SDL_MOUSEBUTTONDOWN)
            {
                // Handle mouse input
                int mouseX, mouseY;
                SDL_GetMouseState(&mouseX, &mouseY); // Get the mouse position

                // Move the paddle to the mouse position
                paddle1.y = mouseY;
            }
        }

        // Update the game state

        // Move the ball
        ball.x += ball_vel_x; // Update the ball's x position based on its velocity
        ball.y += ball_vel_y; // Update the ball's y position based on its velocity

        // Check for collisions with the walls and paddles
        if (ball.x < 0 || ball.x + ball.w > game_screen_width) // Check for collision with the left or right wall
        {
            ball_vel_x = -ball_vel_x; // Reverse the ball's x velocity
        }
        if (ball.y < 0 || ball.y + ball.h > game_screen_height) // Check for collision with the top or bottom wall
        {
            ball_vel_y = -ball_vel_y; // Reverse the ball's y velocity
        }
        if (SDL_HasIntersection(&ball, &paddle1) || SDL_HasIntersection(&ball, &paddle2)) // Check for collision with the paddles
        {
            ball_vel_x = -ball_vel_x; // Reverse the ball's x velocity
        }


        // Clear the window
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, SDL_ALPHA_OPAQUE);
        SDL_RenderClear(renderer);

        // Draw the game objects
        // Draw the paddles
        // Draw the ball

        // Draw the game objects
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, SDL_ALPHA_OPAQUE); // Set the draw color to white

        SDL_Rect leftPaddleRect = { paddle1.x, paddle1.y, paddle1.w, paddle1.h }; // Convert the left paddle to a SDL_Rect
        SDL_RenderFillRect(renderer, &leftPaddleRect); // Draw the left paddle

        SDL_Rect rightPaddleRect = { paddle2.x, paddle2.y, paddle2.w, paddle2.h }; // Convert the right paddle to a SDL_Rect
        SDL_RenderFillRect(renderer, &rightPaddleRect); // Draw the right paddle

        SDL_Rect ballRect = { ball.x, ball.y, ball.w, ball.h }; // Convert the ball to a SDL_Rect
        SDL_RenderFillRect(renderer, &ballRect); // Draw the ball

        // Display the window
        SDL_RenderPresent(renderer);
    }



    // Clean up resources and exit
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;

#endif
}




// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file


